unit MyTreeView;
//# BEGIN TODO  Completed by: author name, id.nr., date
  { E.I.R. van Delden, 0618959, 29-06-2008 }
//# END TODO

//------------------------------------------------------------------------------
// This unit defines class TMyTreeView, which is a descendant of the standard
// TTreeView component from the Delphi VCL (Vusial Component Library).
// See the Delphi Help for information on TTreeView !!
//

interface

uses
  ComCtrls,
  Nodes;

type
  TMyTreeView =
  class(TTreeView)
  private
  public
    procedure SelectNode(ANode: TNode);
    procedure Show(ANode: TNode);
  end;

implementation

{ TMyTreeView }

procedure TMyTreeView.SelectNode(ANode: TNode);
var
  I: integer;
begin
  with Items do
    for I := 0 to Count - 1 do
      if Item[I].Data = ANode
      then Selected := Item[I];
end;

procedure TMyTreeView.Show(ANode: TNode);
//# BEGIN TODO
// Add declarations of local variables and/or functions, if necessary
//# END TODO

  procedure RecAddSons(AFather: TTreeNode; ANode: TNode);
  begin
  //# BEGIN TODO
  // Recursively build a tree of TTreeNode with root AFather corresponding to
  // the formula tree with root ANode



 { L_Acc_firsttreenode:=TreeView1.Items.GetFirstNode;
	if L_Acc_firsttreenode=nil then
	begin
		P_Acc_treenode:=TreeView1.Items.Add(nil,Listbox1.Items[Listbox1.itemindex]);
		count:=0;
		Alias:=chr(65);
	end else
	begin
		count:=count+1;
		Dummy:=65+count;
		P_Acc_treenode:=TreeView1.Items.Addchild(P_Acc_treenode,Listbox1.Items[Listbox1.itemindex]);
		Alias:=chr(Dummy);
	end;
	TreeView1.FullExpand;
	L_Acc_level:=P_Acc_treenode.Level;
	P_Acc_Structure[L_Acc_level].Fieldname:=Listbox1.Items[Listbox1.itemindex];
	P_Acc_Structure[L_Acc_level].Tablename:=ComboBox2.Text;
	P_Acc_Structure[L_Acc_level].Aliasname:=ComboBox1.Text;
	P_Acc_Structure[L_Acc_level].Level:=L_Acc_level;
	P_Acc_Structure[L_Acc_level].Tablealias:=Alias;
  }





  //# END TODO
  end;
begin
//# BEGIN TODO
  { Add code corresponding to the following steps:}

  // Clear Items
  // Add a new root object corresponding to ANode
  // Recursively add sons by means of procedure RecAddSons
  // Show the tree in expanded form




 Items.Clear;
 Items.AddFirst(nil, ANode.GetData);

 RecAddSons( Items, ANode);



//# END TODO
end;

end.
